-- Bundled by luabundle {"version":"1.6.0"}
local __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)
	local loadingPlaceholder = {[{}] = true}

	local register
	local modules = {}

	local require
	local loaded = {}

	register = function(name, body)
		if not modules[name] then
			modules[name] = body
		end
	end

	require = function(name)
		local loadedModule = loaded[name]

		if loadedModule then
			if loadedModule == loadingPlaceholder then
				return nil
			end
		else
			if not modules[name] then
				if not superRequire then
					local identifier = type(name) == 'string' and '\"' .. name .. '\"' or tostring(name)
					error('Tried to require ' .. identifier .. ', but no such module has been registered')
				else
					return superRequire(name)
				end
			end

			loaded[name] = loadingPlaceholder
			loadedModule = modules[name](require, loaded, register, modules)
			loaded[name] = loadedModule
		end

		return loadedModule
	end

	return require, loaded, register, modules
end)(nil)
__bundle_register("__root", function(require, _LOADED, __bundle_register, __bundle_modules)
----#include TTS_xwing/src/Dimensions
-- ~~~~~~
-- Script by dzikakulka
-- Issues, history at: http://github.com/tjakubo2/TTS_xwing
--
-- X-Wing related measurements for TTS
-- ~~~~~~

-- adjusted length = 40mm = 1.4536igu
-- 1mm = 0.03634igu
mm_igu_ratio = 0.03637

-- 40mm = 1.445igu
-- (s1 length / small base size)

-- 1mm = 0.036125igu
--mm_igu_ratio = 0.036125

-- Milimeter dimensions of ship bases
mm_smallBase = 40
mm_mediumBase = 60
mm_largeBase = 80

mm_baseSize = {}
mm_baseSize.small = 40
mm_baseSize.smallBase = 40
mm_baseSize.medium = 60
mm_baseSize.mediumBase = 60
mm_baseSize.large = 80
mm_baseSize.largeBase = 80
mm_baseSize.huge = 80
mm_baseSize.hugeBase = 80

-- Milimeter dimensions for cards
mm_upgrade_width = 41
mm_upgrade_height = 63
mm_pilot_width = 63.5
mm_pilot_height = 88

mm_ship_scale = vector(0.629, 0.629, 0.629)

mm_cardSize = {}
mm_cardSize.upgrade = {width = 41, height = 63}
mm_cardSize.pilot = {width = 63.5, height = 88}

-- Milimeter dimension for dial cards
mm_dialSize = 54

-- Convert argument from MILIMETERS to IN-GAME UNITS
function Convert_mm_igu(milimeters)
    return milimeters*mm_igu_ratio
end

-- Convert argument from IN-GAME UNITS to MILIMETERS
function Convert_igu_mm(in_game_units)
    return in_game_units/mm_igu_ratio
end

----#include TTS_xwing/src/Dimensions
----#include TTS_xwing/src/Commandos
ObjectiveTokenData = require("TTS_xwing/src/ObjectiveTokenData")

ship_drop_positions =
{
  small = {
    right = {pos = vector(-20,0,0), rot = 90},
    left = {pos = vector(20,0,0), rot = -90} ,
    back = {pos = vector(0,20,0), rot = 180}},
  medium = {
    right = {pos = vector(-30,0,0), rot = 90},
    left = {pos = vector(30,0,0), rot = -90} ,
    back = {pos = vector(0,30,0), rot = 180}},
  large = {
    right = {pos = vector(-40,0,0), rot = 90},
    left ={pos = vector(40,0,0), rot = -90} ,
    back = {pos = vector(0,40,0), rot = 180}},
  huge = {
    right = {pos = vector(-40,0,0), rot = 90},
    left = {pos = vector(40,0,0), rot = -90} ,
    back = {pos = vector(0,80,0), rot = 180}},
}


backwards = false
droporigin = nil
dropped = false
stat = false
arcsopen = false
side = "(A)"

rulers = {}
rulerstype = nil

Data = {Size="objective"}

function onLoad(save_state)
    local state = JSON.decode(save_state)
    if state then
      self.setVar("owningPlayer", state.owningPlayer)
      self.setVar("dropped", state.dropped or false)
    end
    SetupContextMenu()

    --[[local vector_lines = {}
    for i, segment in pairs(ObjectiveTokenData.arc_line_segments.right.segments) do
      table.insert(vector_lines, {
          points = {segment[1] + vector(0,0.025,0), segment[2] + vector(0,0.025,0)},
          color = {1,1,1},
          thickness = 0.005,
          rotation = vector(0,0,0)
      })
    end
    self.setVectorLines(vector_lines)]]

end

function onSave()
  local state = {owningPlayer=self.getVar("owningPlayer"), dropped = dropped}
  return JSON.encode(state)
end

function SetupContextMenu()
  self.clearContextMenu()
  self.addContextMenuItem("Check Range 1", checkRange1 , false)
  self.addContextMenuItem("Check Range 2", checkRange2 , false)
  self.addContextMenuItem("Check Range 3", checkRange2 , false)
  self.addContextMenuItem("Check Arc", arc, false)
end

scale = 1/self.getScale().x

function onDropped(playerColor)
    local spos = self.getPosition()
    local nearest = nil
    local nearest_loc = nil
    local nearest_pos = nil
    local minDist = 2.89
    droporigin = self.getPosition() -- 80mm
    for k,ship in pairs(getObjectsWithTag('Ship')) do
        local pos = ship.getPosition()
        for loc, pos_rot in pairs(ship_drop_positions[ship.getTable('Data').Size or "small"]) do
          local drop_pos = pos + Convert_mm_igu(ship.getTransformRight()*pos_rot.pos.x) + Convert_mm_igu(ship.getTransformForward()*pos_rot.pos.y)
          local dist = math.sqrt(math.pow((spos[1]-drop_pos[1]),2) + math.pow((spos[3]-drop_pos[3]),2))
          if dist < minDist then
              nearest = ship
              nearest_loc = pos_rot
              nearest_pos = drop_pos
              minDist = dist
              --print("Closer pos: " .. loc .. " dist: " .. tostring(dist))
          end
        end

    end
    if nearest ~= nil then
        side = "(B)"
        if self.is_face_down then
          side = "(A)"
        end
        printToAll('Mandalorian Commandos ' .. side .. ' ready to drop', color(1.0,1.0,0))
        local side_offset = vector(0,0.05,0)
        if self.is_face_down then
          side_offset = side_offset * -1
        end


        backwards =  math.abs(math.fmod((self.getRotation().y + 90) - (nearest.getRotation().y + nearest_loc.rot),360)) < 90

        local drop_rot = nearest.getRotation() + vector(0,nearest_loc.rot + 90,0)
        if backwards then
          drop_rot = drop_rot + vector(0,180,0)
        end
        if self.is_face_down then
          drop_rot = drop_rot + vector(0,0,180)
        end
        self.setLock(true)
        self.setPositionSmooth(nearest_pos + vector(0,0.25,0), false, false)
        self.setRotationSmooth(drop_rot, false, false)

        droploc = nearest_loc
        dropvector = nearest.getTransformForward():rotateOver("y",nearest_loc.rot)

        showDropButtons()

    end
end

function onContextOpen(player_color)
    showBtn()
end

function showBtn()
    if stat==false and dropped and not arcsopen then
        if self.is_face_down then
            --self.UI.setAttribute("btnPanel", "rotation", "180 0 180")
            self.UI.setAttribute("btnPanel", "rotation", "180 0 0")
            self.UI.setAttribute("btnPanel", "position", "0 0 3")
        else
            self.UI.setAttribute("btnPanel", "rotation", "0 0 180")
            self.UI.setAttribute("btnPanel", "position", "0 0 -3")
        end
        self.UI.show("btnPanel")
        stat=true
    end
end


function hideBtn()
    if stat==true then
        self.UI.hide("btnPanel")
        stat=false
    end
end

function arc()
  checkArc("front", 3, true)
end

function checkRange1()
  checkArc("full", 1, true)
end

function checkRange2()
  checkArc("full", 2, true)
end

function checkRange2()
  checkArc("full", 3, true)
end

function checkArc(type, range, friendly)
  self.clearButtons()
  for _, ruler in pairs(rulers) do
    destroyObject(ruler)
  end
  rulers = {}
  if rulerstype == type .. range then
    rulerstype = nil
  else
    if type == "full" then
      printToAll("Checking for ships at range ".. tostring(range) .." from " .. self.getName(),color(1.0, 1.0, 0.2, 0.9))
    end
    rulers = Global.call("CheckArc", {ship=self,arctype=type, range=range, include_friendly_ships=friendly})

  end
  if rulers and #rulers > 0 then
    rulerstype = type .. range
    arcsopen = true
    hideBtn()
    local rotation = vector(0,-90,0)
    local up = vector(0,1,0)
    if self.is_face_down then
      up = -1*up
      rotation = rotation + vector(0,0,180)
    end
    local raise = 0.03*up
    self.createButton({
      click_function = "removeArcs",
      function_owner = self,
      label          = "Remove",
      position       = raise,
      rotation       = rotation,
      width          = 170,
      height         = 150,
      font_size      = 40
    })
  else
    rulerstype = nil
    arcsopen = false
  end
end

function removeArcs()
  self.clearButtons()
  for _, ruler in pairs(rulers) do
    destroyObject(ruler)
    rulers = {}
  end
  rulerstype = nil
  arcsopen = false
end

moves = {
  Left = vector(1.81,0,1.81),
  Straight = vector(4,0,0),
  Right = vector(1.81,0,-1.81)
}

rotation = {
  Left = vector(0,-90,0),
  Straight = vector(0,0,0),
  Right = vector(0,90,0),
}

function relocate(P, option, id)
    local forward = self.getTransformRight()
    local right = self.getTransformForward()
    local up = self.getTransformUp()
    if self.is_face_down then
      up = -1*up
      forward = -1*forward
    end

    local movePos = moves[id]
    local pos = self.getPosition() + forward*movePos.x + right*movePos.z
    Global.call("API_ClearPosition", {pos = pos, reach = 0.5})
    self.setPositionSmooth(pos, false, false)
    self.setRotationSmooth(self.getRotation() + rotation[id], false, false)
    printToAll('Mandalorian Commandos '..side ..  ' relocated ' .. id, color(1.0,1.0,0))

end

function onPickUp(playerColor)
  self.setVar("owningPlayer", playerColor)
  local color = Color.fromString(playerColor)
  dropped = false
  self.setColorTint(color)
end

function showDropButtons()
  self.clearButtons()
  local rotation = vector(0,-90,0)
  local forward = vector(-1,0,0)
  local right = vector(0,0,1)
  local up = vector(0,1,0)
  if backwards then
    forward = forward*-1
    right = right*-1
    rotation = rotation + vector(0,180,0)
  end
  if self.is_face_down then
    up = -1*up
    forward = forward*-1
    rotation = rotation + vector(0,0,180)
  end


  local raise = 0.03*up

  self.createButton({
    click_function = "dropL",
    function_owner = self,
    label          = "^",
    position       = -0.2*right + raise + 0.3*forward,
    rotation       = vector(0,45,0) + rotation,
    width          = 60,
    height         = 60,
    font_size      = 40
  })
  self.createButton({
    click_function = "dropS",
    function_owner = self,
    label          = "^",
    position       = raise + 0.3*forward,
    rotation       = rotation,
    width          = 60,
    height         = 60,
    font_size      = 40
  })
  self.createButton({
    click_function = "dropR",
    function_owner = self,
    label          = "^",
    position       = 0.2*right + raise + 0.3*forward,
    rotation       = vector(0,-45,0) + rotation,
    width          = 60,
    height         = 60,
    font_size      = 40
  })
  self.createButton({
    click_function = "cancelDrop",
    function_owner = self,
    label          = "Cancel",
    position       = raise + 0.05*forward,
    rotation       = rotation,
    width          = 150,
    height         = 100,
    font_size      = 40
  })
end

function cancelDrop()
  self.setPositionSmooth(droporigin, false, false)
  self.setLock(false)
  self.clearButtons()
end

function dropL()
  printToAll('Mandalorian Commandos '..side ..  ' dropped using a left bank template', color(1.0,1.0,0))
  drop(vector(2.44,0,-1.24), vector(0,45,0))
end
function dropR()
  printToAll('Mandalorian Commandos '..side ..  ' dropped using a right bank template', color(1.0,1.0,0))
  drop(vector(2.44,0,1.24), vector(0,-45,0))
end
function dropS()
  printToAll('Mandalorian Commandos '..side ..  ' dropped using a straight template', color(1.0,1.0,0))
  drop(vector(2,0,0), vector(0,0,0))
end

function drop(position, rotation)
  local forward = self.getTransformRight()
  local right = self.getTransformForward()
  local up = self.getTransformUp()
  local upOffset = up*0.30
  if backwards then
    forward = forward*-1
    right = right*-1
  end
  if self.is_face_down then
    up = -1*up
    forward = forward*-1
    upOffset = up*0.2
  end
  local pos = self.getPosition() + forward*position.x - upOffset + right*position.z
  self.setRotationSmooth(self.getRotation() + rotation, false, false)
  Global.call("API_ClearPosition", {pos = pos, reach = 0.5})
  self.setPositionSmooth(pos, false, false)
  self.clearButtons()
  dropped = true
end

----#include TTS_xwing/src/Commandos
end)
__bundle_register("TTS_xwing/src/ObjectiveTokenData", function(require, _LOADED, __bundle_register, __bundle_modules)
-- Objective style token data, By Eirik W. Munthe (eirikmun)
local O = {}
O.scale = 3.63
O.token_width = 0.18 *O.scale
O.token_height = 0.151 * O.scale
O.token_nub_height = 0.029 * O.scale
O.token_nub_length = 0.031 * O.scale
O.point_height = 0.002 * O.scale
O.outline_points = {
  vector(-O.token_height,O.point_height,-O.token_width),
  vector(O.token_height,O.point_height,-O.token_width),
  vector(O.token_height + O.token_nub_height,O.point_height,-(O.token_width - O.token_nub_height)),
  vector(O.token_height + O.token_nub_height,O.point_height,-(O.token_width - O.token_nub_height - O.token_nub_length)),
  vector(O.token_height + 0.7*O.token_nub_height,O.point_height,-(O.token_width - O.token_nub_height - 1.48*O.token_nub_length)),
  vector(O.token_height ,O.point_height,-(O.token_width - O.token_nub_height - 1.70*O.token_nub_length)),
  vector(O.token_height ,O.point_height,(O.token_width - O.token_nub_height - 1.70*O.token_nub_length)),
  vector(O.token_height + 0.7*O.token_nub_height,O.point_height,(O.token_width - O.token_nub_height - 1.48*O.token_nub_length)),
  vector(O.token_height + O.token_nub_height,O.point_height,(O.token_width - O.token_nub_height - O.token_nub_length)),
  vector(O.token_height + O.token_nub_height,O.point_height,(O.token_width - O.token_nub_height)),
  vector(O.token_height,O.point_height,O.token_width),
  vector(-O.token_height,O.point_height,O.token_width),
  vector(-(O.token_height + O.token_nub_height),O.point_height,(O.token_width - O.token_nub_height)),
  vector(-(O.token_height + O.token_nub_height),O.point_height,(O.token_width - O.token_nub_height - O.token_nub_length)),
  vector(-(O.token_height + 0.7*O.token_nub_height),O.point_height,(O.token_width - O.token_nub_height - 1.48*O.token_nub_length)),
  vector(-(O.token_height) ,O.point_height,(O.token_width - O.token_nub_height - 1.70*O.token_nub_length)),
  vector(-(O.token_height) ,O.point_height,-(O.token_width - O.token_nub_height - 1.70*O.token_nub_length)),
  vector(-(O.token_height + 0.7*O.token_nub_height),O.point_height,-(O.token_width - O.token_nub_height - 1.48*O.token_nub_length)),
  vector(-(O.token_height + O.token_nub_height),O.point_height,-(O.token_width - O.token_nub_height - O.token_nub_length)),
  vector(-(O.token_height + O.token_nub_height),O.point_height,-(O.token_width - O.token_nub_height)),
}

O.hashmark_points = {
  left = vector(0,O.point_height,-O.token_width),
  right = vector(0,O.point_height,O.token_width),
  front = vector(O.token_height,O.point_height,0),
  back = vector(-O.token_height,O.point_height,0),

  frontleft = O.outline_points[2]:lerp(O.outline_points[3],0.5),
  frontright = O.outline_points[10]:lerp(O.outline_points[11],0.5),
  backleft = O.outline_points[20]:lerp(O.outline_points[1],0.5),
  backright = O.outline_points[12]:lerp(O.outline_points[13],0.5),
}

O.arc_line_segments = {}
O.arc_line_segments.full = {
  segments = {
    {O.outline_points[1],O.outline_points[2]},
    {O.outline_points[2],O.outline_points[3]},
    {O.outline_points[3],O.outline_points[4]},
    {O.outline_points[4],O.outline_points[5]},
    {O.outline_points[5],O.outline_points[6]},
    {O.outline_points[6],O.outline_points[7]},
    {O.outline_points[7],O.outline_points[8]},
    {O.outline_points[8],O.outline_points[9]},
    {O.outline_points[9],O.outline_points[10]},
    {O.outline_points[10],O.outline_points[11]},
    {O.outline_points[11],O.outline_points[12]},
    {O.outline_points[12],O.outline_points[13]},
    {O.outline_points[13],O.outline_points[14]},
    {O.outline_points[14],O.outline_points[15]},
    {O.outline_points[15],O.outline_points[16]},
    {O.outline_points[16],O.outline_points[17]},
    {O.outline_points[17],O.outline_points[18]},
    {O.outline_points[18],O.outline_points[19]},
    {O.outline_points[19],O.outline_points[20]},
    {O.outline_points[20],O.outline_points[1]},
  },
  degrees={direction=0, spread=180}
}

O.arc_line_segments.fullback = {
  segments = {
    {O.hashmark_points.left,O.outline_points[2]},
    {O.outline_points[2],O.outline_points[3]},
    {O.outline_points[3],O.outline_points[4]},
    {O.outline_points[4],O.outline_points[5]},
    {O.outline_points[5],O.outline_points[6]},
    {O.outline_points[6],O.outline_points[7]},
    {O.outline_points[7],O.outline_points[8]},
    {O.outline_points[8],O.outline_points[9]},
    {O.outline_points[9],O.outline_points[10]},
    {O.outline_points[10],O.outline_points[11]},
    {O.outline_points[11],O.hashmark_points.right},
  },
  degrees={direction=90, spread=90}
}
O.arc_line_segments.fullfront = {
  segments = {
    {O.hashmark_points.right,O.outline_points[12]},
    {O.outline_points[12],O.outline_points[13]},
    {O.outline_points[13],O.outline_points[14]},
    {O.outline_points[14],O.outline_points[15]},
    {O.outline_points[15],O.outline_points[16]},
    {O.outline_points[16],O.outline_points[17]},
    {O.outline_points[17],O.outline_points[18]},
    {O.outline_points[18],O.outline_points[19]},
    {O.outline_points[19],O.outline_points[20]},
    {O.outline_points[20],O.outline_points[1]},
    {O.outline_points[1],O.hashmark_points.left},
  },
  degrees={direction=-90, spread=90}
}

O.arc_line_segments.back = {
  segments = {
    {O.hashmark_points.frontleft,O.outline_points[3]},
    {O.outline_points[3],O.outline_points[4]},
    {O.outline_points[4],O.outline_points[5]},
    {O.outline_points[5],O.outline_points[6]},
    {O.outline_points[6],O.outline_points[7]},
    {O.outline_points[7],O.outline_points[8]},
    {O.outline_points[8],O.outline_points[9]},
    {O.outline_points[9],O.outline_points[10]},
    {O.outline_points[10],O.hashmark_points.frontright},
  },
  degrees={direction=90, spread=44}
}

O.arc_line_segments.front = {
  segments = {
    {O.hashmark_points.backright,O.outline_points[13]},
    {O.outline_points[13],O.outline_points[14]},
    {O.outline_points[14],O.outline_points[15]},
    {O.outline_points[15],O.outline_points[16]},
    {O.outline_points[16],O.outline_points[17]},
    {O.outline_points[17],O.outline_points[18]},
    {O.outline_points[18],O.outline_points[19]},
    {O.outline_points[19],O.outline_points[20]},
    {O.outline_points[20],O.hashmark_points.backleft},
  },
  degrees={direction=-90, spread=44}
}

O.arc_line_segments.right = {
  segments = {
    {O.hashmark_points.backleft,O.outline_points[1]},
    {O.outline_points[1],O.outline_points[2]},
    {O.outline_points[2],O.hashmark_points.frontleft},
  },
  degrees={direction=0, spread=45}
}

O.arc_line_segments.left = {
  segments = {
    {O.hashmark_points.frontright,O.outline_points[11]},
    {O.outline_points[11],O.outline_points[12]},
    {O.outline_points[12],O.hashmark_points.backright},
  },
  degrees={direction=180, spread=45}
}

O.arc_line_segments.bullseye = nil


return O

end)
return __bundle_require("__root")